install.packages("THON")
library(THON)
install_github("THONNARD/THON")
library(devtools)
install_github("THONNARD/THON")
library(THON)
vangle(15,30)
propData()
propData(test)
vangle
propData
library(devtools)
library(roxygen2)
document()
setwd("..")
install("THON")
steyx
remove.packages()
remove.packages("THON")
library(THON)
steyx
steyx()
vangle()
library(THON)
library(devtools)
install_github("THONNARD/THON")
library(THON)
stexy
stexy
library(THON)
stexy()
steyx()
steyx(14)
steyx(14,15)
vangle
steyc
steyx
follower <- c(22,14)
unclassifiable <- c(9,6)
leader <- c(12,32)
as.data.frame(follower,unclassifiable,leader)
rbind(follower,unclassifiable,leader)
a <- rbind(follower,unclassifiable,leader)
chisq.test(a)
a$obs
test <- chisq.test(a)
test$observed
test$expected
library(THON)
probData(a)
propData(a)
b <- propData(a)
test2 <- chisq.test(b)
test
test2
test2$observed
test2$expected
chisq.post.hoc()
install.packages("fifer")
install_github("cran/fifer")
library(fifer)
chisq.post.hoc(a)
chisq.post.hoc(a, control="bonferroni")
setwd("NMDA lesions paper/")
# libraries
library(readxl)
library(tidyverse)
library(Rmisc)
library(afex)
library(emmeans)
library(ggplot2)
library(scales)
library(ggpubr)
library(corrplot)
library(fifer)
# read file
data_swim <- read_excel("MWM strategies exp B.xlsx",sheet=1)
setwd("..")
setwd("NMDA lesions paper/")
# read file
data_swim <- read_excel("MWM strategies exp B.xlsx",sheet=1)
# rename groups + change order
data_swim$Group <- factor(data_swim$Group, levels=c("5","1","2","3","4"))
data_swim$Group <- revalue(data_swim$Group, c("1"="lOFC-rvHC", "2"="lOFC-lvHC", "3"="lvHC-rvHC", "4"="lOFC-rOFC", "5"="Control"))
# convert variables
data_swim$Animal <- factor(data_swim$Animal)
data_swim$Animal_ID <- factor(data_swim$Animal_ID)
data_swim$Phase <- factor(data_swim$Phase)
data_swim$Class <- factor(data_swim$Class)
data_swim$Rank <- factor(data_swim$Rank)
# split data per phase
data_swim_acq <- data_swim %>% filter(Phase == "Acquisition")
data_swim_rev <- data_swim %>% filter(Phase == "Reversal")
data_swim_probe1 <- data_swim %>% filter(Phase == "Probe1")
data_swim_probe2 <- data_swim %>% filter(Phase == "Probe2")
# contingency tables class
tbl_acq_class <- table(data_swim_acq$Group, data_swim_acq$Class)
tbl_rev_class <- table(data_swim_rev$Group, data_swim_rev$Class)
tbl_probe1_class <- table(data_swim_probe1$Group, data_swim_probe1$Class)
tbl_probe2_class <- table(data_swim_probe2$Group, data_swim_probe2$Class)
# contingency tables rank
tbl_acq_rank <- table(data_swim_acq$Group, data_swim_acq$Rank)
tbl_rev_rank <- table(data_swim_rev$Group, data_swim_rev$Rank)
tbl_probe1_rank <- table(data_swim_probe1$Group, data_swim_probe1$Rank)
tbl_probe2_rank <- table(data_swim_probe2$Group, data_swim_probe2$Rank)
## statistical tests
# chi-squared tests: cf. http://www.r-tutor.com/elementary-statistics/goodness-fit/chi-squared-test-independence
# or fisher's exact tests: http://r.789695.n4.nabble.com/fisher-exact-for-gt-2x2-table-td3481979.html
# cf. http://www.sthda.com/english/wiki/chi-square-goodness-of-fit-test-in-r
# cf. http://www.sthda.com/english/wiki/chi-square-test-of-independence-in-r
# Chi-squared tests class
test_acq_class <- chisq.test(tbl_acq_class)
chisq.post.hoc(tbl_acq_class)
chisq.post.hoc(tbl_acq_class, simulate.p.value=TRUE)
